diff -Naur linux-2.6.11.12/arch/i386/kernel/entry.S linux-2.6.11.12-hwk6/arch/i386/kernel/entry.S
--- linux-2.6.11.12/arch/i386/kernel/entry.S	2009-05-05 14:04:06.000000000 -0400
+++ linux-2.6.11.12-hwk6/arch/i386/kernel/entry.S	2009-04-25 17:46:11.000000000 -0400
@@ -890,5 +890,8 @@
 	.long sys_add_key
 	.long sys_request_key
 	.long sys_keyctl
+	.long sys_addtag
+	.long sys_rmtag
+	.long sys_gettags
 
 syscall_table_size=(.-sys_call_table)
diff -Naur linux-2.6.11.12/fs/ext2/ext2.h linux-2.6.11.12-hwk6/fs/ext2/ext2.h
--- linux-2.6.11.12/fs/ext2/ext2.h	2005-06-11 22:45:37.000000000 -0400
+++ linux-2.6.11.12-hwk6/fs/ext2/ext2.h	2009-04-25 21:46:18.000000000 -0400
@@ -41,6 +41,9 @@
 	__u32	i_prealloc_block;
 	__u32	i_prealloc_count;
 	__u32	i_dir_start_lookup;
+
+	__u32	i_file_tags;
+
 #ifdef CONFIG_EXT2_FS_XATTR
 	/*
 	 * Extended attributes can be read independently of the main file
@@ -123,6 +126,11 @@
 extern void ext2_truncate (struct inode *);
 extern int ext2_setattr (struct dentry *, struct iattr *);
 extern void ext2_set_inode_flags(struct inode *inode);
+	/* HW6 additions */
+extern int ext2_addtag (struct dentry *d, const char *tag, size_t taglen);
+extern int ext2_rmtag (struct dentry *d, const char *tag, size_t taglen);
+extern size_t ext2_gettags (struct dentry *d, char *buf, size_t buflen);
+extern void ext2_tags_clear(struct inode *inode);
 
 /* ioctl.c */
 extern int ext2_ioctl (struct inode *, struct file *, unsigned int,
diff -Naur linux-2.6.11.12/fs/ext2/file.c linux-2.6.11.12-hwk6/fs/ext2/file.c
--- linux-2.6.11.12/fs/ext2/file.c	2005-06-11 22:45:37.000000000 -0400
+++ linux-2.6.11.12-hwk6/fs/ext2/file.c	2009-04-25 17:46:11.000000000 -0400
@@ -65,4 +65,8 @@
 #endif
 	.setattr	= ext2_setattr,
 	.permission	= ext2_permission,
+	/* HW6 additions: */
+	.add_tag 	= ext2_addtag,
+	.rm_tag 	= ext2_rmtag,
+	.get_tags	= ext2_gettags,	
 };
diff -Naur linux-2.6.11.12/fs/ext2/ialloc.c linux-2.6.11.12-hwk6/fs/ext2/ialloc.c
--- linux-2.6.11.12/fs/ext2/ialloc.c	2005-06-11 22:45:37.000000000 -0400
+++ linux-2.6.11.12-hwk6/fs/ext2/ialloc.c	2009-04-25 21:44:35.000000000 -0400
@@ -124,7 +124,8 @@
 	if (!is_bad_inode(inode)) {
 		/* Quota is already initialized in iput() */
 		ext2_xattr_delete_inode(inode);
-	    	DQUOT_FREE_INODE(inode);
+		ext2_tags_clear(inode);
+		DQUOT_FREE_INODE(inode);
 		DQUOT_DROP(inode);
 	}
 
@@ -589,6 +590,7 @@
 	ei->i_frag_no = 0;
 	ei->i_frag_size = 0;
 	ei->i_file_acl = 0;
+	ei->i_file_tags = 0; // HW6
 	ei->i_dir_acl = 0;
 	ei->i_dtime = 0;
 	ei->i_block_group = group;
diff -Naur linux-2.6.11.12/fs/ext2/inode.c linux-2.6.11.12-hwk6/fs/ext2/inode.c
--- linux-2.6.11.12/fs/ext2/inode.c	2005-06-11 22:45:37.000000000 -0400
+++ linux-2.6.11.12-hwk6/fs/ext2/inode.c	2009-05-01 17:02:29.000000000 -0400
@@ -31,6 +31,7 @@
 #include <linux/writeback.h>
 #include <linux/buffer_head.h>
 #include <linux/mpage.h>
+
 #include "ext2.h"
 #include "acl.h"
 
@@ -1069,6 +1070,10 @@
 	ei->i_frag_size = raw_inode->i_fsize;
 	ei->i_file_acl = le32_to_cpu(raw_inode->i_file_acl);
 	ei->i_dir_acl = 0;
+	/* added for HW6 */
+	ei->i_file_tags = le32_to_cpu(raw_inode->i_reserved1);
+	/* */
+
 	if (S_ISREG(inode->i_mode))
 		inode->i_size |= ((__u64)le32_to_cpu(raw_inode->i_size_high)) << 32;
 	else
@@ -1185,6 +1190,9 @@
 	raw_inode->i_frag = ei->i_frag_no;
 	raw_inode->i_fsize = ei->i_frag_size;
 	raw_inode->i_file_acl = cpu_to_le32(ei->i_file_acl);
+	/* added for HW6 */
+	raw_inode->i_reserved1 = cpu_to_le32(ei->i_file_tags);
+	/* */
 	if (!S_ISREG(inode->i_mode))
 		raw_inode->i_dir_acl = cpu_to_le32(ei->i_dir_acl);
 	else {
@@ -1268,3 +1276,243 @@
 		error = ext2_acl_chmod(inode);
 	return error;
 }
+
+/* HW6 additions */
+#define EXT2_MAX_TAGS 16
+
+void ext2_tags_clear(struct inode *inode) {
+	int block_id = EXT2_I(inode)->i_file_tags;
+	if ( block_id ) {
+		ext2_free_blocks(inode, block_id, 1);
+		/* XXX what's with the get/forget business? */
+		EXT2_I(inode)->i_file_tags = 0;
+	}
+}
+
+int ext2_addtag (struct dentry *d, const char *tag, size_t input_length) {
+	struct inode *node = d->d_inode;
+	struct ext2_inode_info *ei = EXT2_I(node);
+	struct buffer_head *bh = NULL;
+	int error = 0, i = 0, tag_found = 0;
+	char *curr = NULL;
+	if (node->i_sb->s_blocksize < input_length + 4) return -ENOSPC;
+	
+	down_write(&ei->xattr_sem);
+
+	/* maybe ? type questionable */
+	sector_t block_id = ei->i_file_tags;
+	if (!block_id) {
+		/* We need to allocate a new block */
+		/* we need to crib this code from xattr.c */
+		int error = 0;
+		int goal = le32_to_cpu(
+			EXT2_SB(node->i_sb)->s_es->s_first_data_block) +
+			ei->i_block_group * EXT2_BLOCKS_PER_GROUP(node->i_sb);
+		block_id = ext2_new_block(node, goal, NULL, NULL, &error);
+		if (error) {
+			printk(KERN_ERR "Unable to allocate block!\n");
+			goto out;
+		}
+		/* get new block */
+		printk(KERN_DEBUG "In addtag: allocated block %d\n", block_id);
+		ei->i_file_tags = block_id;
+		bh = sb_getblk(node->i_sb, block_id);
+		curr = bh->b_data;
+		goto write_tag;
+	} else {
+		bh = sb_bread(node->i_sb, block_id);
+		curr = bh->b_data;
+	}
+
+	
+	for ( i = 0; i < EXT2_MAX_TAGS; i++ ) {
+		unsigned short taglen;		
+		/* read first two bytes for taglength */
+		if (curr - bh->b_data + 2 > bh->b_size) {
+			printk(KERN_ERR "Overflowing block reading tag size\n");
+			error = -ESPIPE;
+			break;
+		}
+		memcpy(&taglen, curr, 2);
+		taglen = le16_to_cpu(taglen);
+		printk(KERN_DEBUG "Loop %2d, length %u, offset %d\n", 
+			i, taglen, curr - bh->b_data);
+		if (!taglen) break;
+		curr += 2;
+		if (curr - bh->b_data + taglen > bh->b_size) {
+			printk(KERN_ERR "Overflowing block reading tag content\n");			error = -ESPIPE;
+			break;
+		}
+
+		if ( taglen == input_length && !strncmp(curr, tag, taglen) ) {
+			tag_found = 1;			
+			break;
+		}
+		curr += taglen;
+	}
+	
+	if ( i >= EXT2_MAX_TAGS ) {
+		printk(KERN_DEBUG "Tag block full of tags already\n");
+		error = -ENOSPC;
+		goto out;
+	} else if (tag_found) {
+		printk(KERN_DEBUG "Tag already present\n");
+		// EINVAL?
+		goto out;
+	}
+
+write_tag:
+	if (curr - bh->b_data + input_length + 4 > bh->b_size) {
+		printk(KERN_DEBUG "Tag cannot be written to block\n");
+		error = -ENOSPC;
+		goto out;
+	}
+
+	unsigned short len_buf = input_length;
+	len_buf = cpu_to_le16(len_buf);
+	memcpy(curr, &len_buf, 2);
+	curr += 2;
+	memcpy(curr, tag, input_length);
+	len_buf = cpu_to_le16(0);
+	memcpy(curr + input_length, &len_buf, 2);
+
+	node->i_ctime = CURRENT_TIME_SEC;
+	set_buffer_uptodate(bh); // right?
+	mark_buffer_dirty(bh);
+out:
+	up_write(&ei->xattr_sem);
+	return error;
+}
+int ext2_rmtag (struct dentry *d, const char *tag, size_t taglen) {
+	struct inode *node = d->d_inode;
+	struct ext2_inode_info *ei = EXT2_I(node);
+	struct buffer_head *bh = NULL;
+	int error = 0, i = 0;
+
+	down_write(&ei->xattr_sem);
+	
+	/* maybe ? type questionable */
+	sector_t block_id = ei->i_file_tags;
+	if (!block_id) {
+	  // get more informative error?
+		printk(KERN_DEBUG "In rmtag on %s: no tags\n", d->d_name.name);
+		//goto out;
+	}
+	printk(KERN_DEBUG "In rmtag on %s: reading buffer\n", d->d_name.name);
+	bh = sb_bread(node->i_sb, block_id);
+	char *curr = bh->b_data;
+	char *rm_offset = bh->b_data;
+	char *rm_offset_end = bh->b_data;
+	int tag_found = 0;
+
+	for ( i = 0; i < EXT2_MAX_TAGS; i++ ) {
+		unsigned short currtaglen;	
+		// workaround goto
+		if (error < 0) continue;
+	
+		/* read first two bytes for currtaglength */
+		if (curr - bh->b_data + 2 > bh->b_size) {
+			printk(KERN_ERR "Overflowing block reading tag size\n");
+			error = -ESPIPE;
+			break;
+		}
+		memcpy(&currtaglen, curr, 2);
+		taglen = le16_to_cpu(currtaglen);
+		printk(KERN_DEBUG "Loop %2d, length %u, offset %d\n", 
+			i, currtaglen, curr - bh->b_data);
+		if (!currtaglen) break;
+		curr += 2;
+		if (curr - bh->b_data + currtaglen > bh->b_size) {
+			printk(KERN_ERR "Overflowing block reading tag content\n");
+			error = -ESPIPE;
+			break;
+		}
+
+		if (currtaglen == taglen) {
+		  if (strncmp(curr,tag,taglen) == 0) {
+		    if (tag_found) {
+		      printk(KERN_ERR "ERROR in rmtag: tag saved twice?\n");
+		      error = -EINVAL;
+		      break;
+		    }
+		    rm_offset = curr - 2;
+		    rm_offset_end = curr + currtaglen;
+		    tag_found = 1;
+		  }
+		}		
+		curr += currtaglen;
+	}
+
+	if (!tag_found) {
+	  printk(KERN_DEBUG "ERROR in rmtag: tag not found\n");
+	  error = -EINVAL;
+	  //goto out;
+	} else if (!error) {
+		if ( 1 == i ) ext2_tags_clear(node);
+		else {
+		  // swap stuff
+			size_t swap_buf_size = bh->b_data + bh->b_size - rm_offset_end;
+			memmove(rm_offset, rm_offset_end, swap_buf_size);
+		}
+		node->i_ctime = CURRENT_TIME_SEC;
+		mark_buffer_dirty(bh);
+	}
+	
+ out:
+	up_write(&ei->xattr_sem);	
+	return error;
+}
+
+
+
+size_t ext2_gettags (struct dentry *d, char *buf, size_t buflen) {
+	size_t total_bytes = 0;
+	int i;
+	struct inode *node = d->d_inode;
+	struct ext2_inode_info *ei = EXT2_I(node);
+	struct buffer_head *bh = NULL;
+
+	down_read(&ei->xattr_sem);
+	
+	/* maybe ? type questionable */
+	sector_t block_id = ei->i_file_tags;
+	if (!block_id) {
+		printk(KERN_DEBUG "In gettags on %s: no tags\n", d->d_name.name);
+		goto out;
+	}
+	printk(KERN_DEBUG "In gettags: reading block %d\n", block_id);
+	bh = sb_bread(node->i_sb, block_id);
+	char *curr = bh->b_data;
+
+	for ( i = 0; i < EXT2_MAX_TAGS; i++ ) {
+		unsigned short taglen;		
+		/* read first two bytes for taglength */
+		if (curr - bh->b_data + 2 > bh->b_size) {
+			printk(KERN_ERR "Overflowing block reading tag size\n");
+			total_bytes = -ESPIPE;
+			break;
+		}
+		memcpy(&taglen, curr, 2);
+		taglen = le16_to_cpu(taglen);
+		printk(KERN_DEBUG "Loop %2d, length %u, offset %d\n", 
+			i, taglen, curr - bh->b_data);
+		if (!taglen) break;
+		curr += 2;
+		if (curr - bh->b_data + taglen > bh->b_size) {
+			printk(KERN_ERR "Overflowing block reading tag content\n");			
+			total_bytes = -ESPIPE;
+			break;
+		}
+		total_bytes += taglen + 1;
+		if (total_bytes < buflen) {
+			strncpy(buf, curr, taglen);
+			*(buf + taglen) = '\0';
+			buf += taglen + 1;
+		}
+		curr += taglen;
+	}
+
+out:
+	up_read(&ei->xattr_sem);
+	return total_bytes;
+}
diff -Naur linux-2.6.11.12/fs/ext2/namei.c linux-2.6.11.12-hwk6/fs/ext2/namei.c
--- linux-2.6.11.12/fs/ext2/namei.c	2005-06-11 22:45:37.000000000 -0400
+++ linux-2.6.11.12-hwk6/fs/ext2/namei.c	2009-04-25 17:09:59.000000000 -0400
@@ -404,6 +404,10 @@
 #endif
 	.setattr	= ext2_setattr,
 	.permission	= ext2_permission,
+	/* HW6 additions: */
+	.add_tag 	= ext2_addtag,
+	.rm_tag 	= ext2_rmtag,
+	.get_tags	= ext2_gettags,
 };
 
 struct inode_operations ext2_special_inode_operations = {
@@ -415,4 +419,8 @@
 #endif
 	.setattr	= ext2_setattr,
 	.permission	= ext2_permission,
+	/* HW6 additions: */
+	.add_tag 	= ext2_addtag,
+	.rm_tag 	= ext2_rmtag,
+	.get_tags	= ext2_gettags,
 };
diff -Naur linux-2.6.11.12/fs/inode.c linux-2.6.11.12-hwk6/fs/inode.c
--- linux-2.6.11.12/fs/inode.c	2005-06-11 22:45:37.000000000 -0400
+++ linux-2.6.11.12-hwk6/fs/inode.c	2009-05-05 13:09:46.000000000 -0400
@@ -6,6 +6,11 @@
 
 #include <linux/config.h>
 #include <linux/fs.h>
+/* added HW6 */
+#include <linux/namei.h>
+#include <asm/namei.h>
+#include <asm/uaccess.h>
+/* */
 #include <linux/mm.h>
 #include <linux/dcache.h>
 #include <linux/init.h>
@@ -1375,3 +1380,208 @@
 		       mode);
 }
 EXPORT_SYMBOL(init_special_inode);
+
+
+/* added HW6 */
+
+/**
+ * Add a tag to given file.
+ * @param path Pathname
+ * @param word Tag
+ * @param len Tag length
+ * a lot of copy paste from fs/namei.c sys_mkdir 
+ */
+asmlinkage int sys_addtag(char __user *path, char *word, size_t len) 
+{
+  int error = 0;
+  char * tmp;
+  int real_len;
+  struct dentry *dentry;
+  struct nameidata nd;
+
+  // dummy check
+  if (len == 0)
+    return -EINVAL;
+
+  tmp = getname(path);
+  error = PTR_ERR(tmp);
+  if (!IS_ERR(tmp)) {
+
+    error = path_lookup(tmp, 0 , &nd);
+    if (error)
+      goto out_putname;
+    // now we should have nd.dentry the right *dentry
+    if (IS_ERR(nd.dentry)) {
+      error = PTR_ERR(nd.dentry); // error pointer in dentry
+      goto out_path;
+    }
+    dentry = nd.dentry;
+  }
+  else { goto out; }
+  
+  // we have the proper dentry, let's copy user stuff
+  char * mem_word;
+  mem_word = kmalloc(len+1,GFP_KERNEL);
+  if (NULL == mem_word) {
+    error = -ENOMEM; 
+    goto out_path;
+  }
+  real_len =  strncpy_from_user(mem_word,word,len);
+  if ( 0 > real_len ) {
+    error = -EFAULT;
+    goto out_free;
+  } else if (real_len < len) {
+    printk(KERN_DEBUG "Buffer length %d, string length %d\n", len, real_len);
+  }
+  // add null at the end
+  mem_word[len] = '\0';
+  
+  // call vfs function
+  printk(KERN_DEBUG "addtag sys call: calling vfs func, word=%s, dentry name=%s\n", mem_word, dentry->d_name.name);
+  // must check for errors here, it just can't work like that
+  if ( dentry->d_inode->i_op->add_tag != NULL ) {
+    error = dentry->d_inode->i_op->add_tag(dentry,mem_word,real_len);
+	printk(KERN_DEBUG "VFS callback returned %d\n", error);
+  } else {
+  	printk(KERN_DEBUG "No such function 'add_tag'\n");
+  	error = -ENOSYS; /* XXX probably not right */
+  }
+
+out_free:
+  // free kernel memory
+  kfree(mem_word);
+out_path:
+  // release path
+  path_release(&nd);
+out_putname:
+  putname(tmp);
+out:
+  return error;
+}
+
+asmlinkage int sys_rmtag(char __user *path, char *word, size_t len) 
+{
+  int error = 0;
+  char * tmp;
+  int real_len;
+  struct dentry *dentry;
+  struct nameidata nd;
+
+  // dummy check
+  if (len == 0)
+    return -EINVAL;
+
+  tmp = getname(path);
+  error = PTR_ERR(tmp);
+  if (!IS_ERR(tmp)) {
+
+    error = path_lookup(tmp,0, &nd);
+    if (error)
+      goto out_putname;
+    // now we should have nd.dentry the right *dentry
+    if (IS_ERR(nd.dentry)) {
+      error = PTR_ERR(nd.dentry); // error pointer in dentry
+      goto out_path;
+    }
+    dentry = nd.dentry;
+  }
+  else { goto out; }
+  
+  // we have the proper dentry, let's copy user stuff
+  char * mem_word;
+  mem_word = kmalloc(len+1,GFP_KERNEL);
+  if (NULL == mem_word) {error = -ENOMEM; goto out_path;}
+  real_len =  strncpy_from_user(mem_word,word,len);
+  if ( 0 > real_len ) {
+    error = -EFAULT;
+    goto out_free;
+  } else if (real_len < len) {
+    printk(KERN_DEBUG "Buffer length %d, string length %d\n", len, real_len);
+  }  // add null at the end
+  mem_word[len] = '\0';
+  
+  // call vfs function
+  printk(KERN_DEBUG "rmtag sys call: calling vfs func, word=%s, dentry name=%s\n", mem_word, dentry->d_name.name);
+  
+  if ( dentry->d_inode->i_op->rm_tag != NULL ) {
+    error = dentry->d_inode->i_op->rm_tag(dentry,mem_word,real_len);
+	printk(KERN_DEBUG "VFS callback returned %d\n", error);
+  } else {
+  	printk(KERN_DEBUG "No such function 'rm_tag'\n");
+  	error = -ENOSYS; /* XXX probably not right */
+  }
+
+out_free:
+  // free kernel memory
+  kfree(mem_word);
+out_path:
+  // release path
+  path_release(&nd);
+out_putname:
+  putname(tmp);
+out:
+  return error;
+}
+
+asmlinkage size_t sys_gettags(char __user *path, char *buffer, size_t size) 
+{
+  int error = 0;
+  char * tmp;
+  struct dentry *dentry;
+  struct nameidata nd;
+
+  tmp = getname(path);
+  error = PTR_ERR(tmp);
+  if (!IS_ERR(tmp)) {
+
+    error = path_lookup(tmp,0, &nd);
+    if (error)
+      goto out_putname;
+    // now we should have nd.dentry the right *dentry
+    if (IS_ERR(nd.dentry)) {
+      error = PTR_ERR(nd.dentry); // error pointer in dentry
+      goto out_path;
+    }
+    dentry = nd.dentry;
+  }
+  else { goto out; }
+  
+  char *k_buf = kmalloc(size, GFP_KERNEL);
+  if (NULL == k_buf) {
+  	error = -ENOMEM;
+  	goto out_path;
+  }
+  
+  // call vfs function
+  printk(KERN_DEBUG "gettag sys call: calling vfs func, dentry name=%s\n", dentry->d_name.name);
+  if ( dentry->d_inode->i_op->get_tags != NULL ) {
+    error = dentry->d_inode->i_op->get_tags(dentry,k_buf,size);
+	printk(KERN_DEBUG "VFS callback returned %d\n", error);
+  } else {
+  	printk(KERN_DEBUG "No such function 'get_tags'\n");
+  	error = -ENOSYS; /* XXX probably not right */
+  	goto out_buf;
+  }
+  if ( error >= 0 && error <= size) {
+  	int s = copy_to_user(buffer, k_buf, error);
+  	if (s) {
+  		printk(KERN_DEBUG "Error (%d) in gettags copy_to_user\n", s);
+  		error = -EFAULT;
+  	} else {
+  		printk(KERN_DEBUG "Copied %d bytes to user buffer\n",error);
+  	}
+  }
+
+out_buf:
+  kfree(k_buf);
+out_path:
+  // release path
+  path_release(&nd);
+out_putname:
+  putname(tmp);
+out:
+  return error;
+}
+
+
+
diff -Naur linux-2.6.11.12/include/asm-i386/unistd.h linux-2.6.11.12-hwk6/include/asm-i386/unistd.h
--- linux-2.6.11.12/include/asm-i386/unistd.h	2005-06-11 22:45:37.000000000 -0400
+++ linux-2.6.11.12-hwk6/include/asm-i386/unistd.h	2009-04-23 20:38:53.000000000 -0400
@@ -294,8 +294,12 @@
 #define __NR_add_key		286
 #define __NR_request_key	287
 #define __NR_keyctl		288
+/* added for HW6 */
+#define __NR_addtag		289
+#define __NR_rmtag		290
+#define __NR_gettags		291
 
-#define NR_syscalls 289
+#define NR_syscalls 292
 
 /*
  * user-visible error numbers are in the range -1 - -128: see
diff -Naur linux-2.6.11.12/include/linux/fs.h linux-2.6.11.12-hwk6/include/linux/fs.h
--- linux-2.6.11.12/include/linux/fs.h	2005-06-11 22:45:37.000000000 -0400
+++ linux-2.6.11.12-hwk6/include/linux/fs.h	2009-04-23 18:56:44.000000000 -0400
@@ -971,6 +971,10 @@
 	ssize_t (*getxattr) (struct dentry *, const char *, void *, size_t);
 	ssize_t (*listxattr) (struct dentry *, char *, size_t);
 	int (*removexattr) (struct dentry *, const char *);
+	/* HW6 additions: */
+	int (*add_tag) (struct dentry *, const char *, size_t);
+	int (*rm_tag) (struct dentry *, const char *, size_t);
+	size_t (*get_tags) (struct dentry *, char *, size_t);
 };
 
 struct seq_file;
diff -Naur linux-2.6.11.12/include/linux/syscalls.h linux-2.6.11.12-hwk6/include/linux/syscalls.h
--- linux-2.6.11.12/include/linux/syscalls.h	2005-06-11 22:45:37.000000000 -0400
+++ linux-2.6.11.12-hwk6/include/linux/syscalls.h	2009-04-23 18:56:44.000000000 -0400
@@ -506,4 +506,9 @@
 asmlinkage long sys_keyctl(int cmd, unsigned long arg2, unsigned long arg3,
 			   unsigned long arg4, unsigned long arg5);
 
+/* added HW6 */
+asmlinkage long sys_addtag(char *path,char *word, size_t len);
+asmlinkage long sys_rmtag(char *path,char *word, size_t len);
+asmlinkage long sys_gettags(char *path,char *buffer, size_t sizecd);
+
 #endif
