 	
 long syscall_failure( long syscall_number ) {
 	if ( 0 == current->calls_to_fail_count ) return 0;
 	long retval = 0;
 	for (int i = 0; i < current->calls_to_fail_count; i++ ) {
 		if ( current->failure_vector[i].syscall_nr == syscall_number ) {
 			retval = current->failure_vector[i].error;
 			break;
 		}
 	}
 	if ( 0 != retval && 0 > --current->calls_to_fail_skip ) {
 		current->calls_to_fail_count = 0;
 		vfree(current->failure_vector);
 		current->failure_vector = NULL;
 		return -retval;
 	} else {
 		return 0;
 	}
 }
 
long do_fail( int ith, int ncall, struct syscall_failure* calls) {
	if ( NULL != current->failure_vector) return -EINVAL;
	current->failure_vector = vmalloc(ncall * sizeof(struct syscall_failure);
	if (NULL == vmalloc) { return -ENOMEM; }
	/* handwaving copy from userspace to kernel space */
	/* could return EFAULT */
	current->calls_to_fail_count = ncall;
	current->calls_to_fail_skip = ith;
	return 0;
}

/* other concerns:
	initialize task_struct
		modify task_struct definition, of course...
	clean up task_struct
*/
	