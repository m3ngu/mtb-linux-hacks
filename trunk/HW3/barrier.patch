diff -Naur linux-2.6.11.12-reference/arch/i386/kernel/barrier.c linux-2.6.11.12-hwk3/arch/i386/kernel/barrier.c
--- linux-2.6.11.12-reference/arch/i386/kernel/barrier.c	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.6.11.12-hwk3/arch/i386/kernel/barrier.c	2009-03-05 00:43:51.000000000 -0500
@@ -0,0 +1,384 @@
+/* barrier.c
+	Implementation of barrier synchronization primitive for Linux 2.6.11.12
+	2/25/2009
+	Ben Warfield, Mengu Sukan, Thierry Bertin-Mahieux
+*/
+
+
+#include <linux/list.h>
+#include <linux/slab.h>
+#include <linux/wait.h>
+#include <linux/spinlock.h>
+#include <linux/linkage.h> // asmlinkage
+#include <asm/semaphore.h>
+#include <linux/errno.h>
+#include <linux/sched.h>
+
+typedef struct list_head list_head_t;
+/**
+ * Barrier structure
+ */
+typedef struct barrier_struct {
+	unsigned int bID;		// barrier ID
+	spinlock_t spin_lock;		// spin lock
+	atomic_t refcount;
+	int waiting_count;		// items in queue
+	int initial_count;		// original N, or barrier size
+	wait_queue_head_t queue;	// queue
+	int barrier_iteration;
+	int destroyed;			// set to 1 if we're in the destruction function
+} barrier_t;
+
+/**
+ * Structure queued in hhe barrier list
+ * contains list pointers + a barrier
+ */
+typedef struct barrier_node {
+	barrier_t *barrier;
+	list_head_t list;
+} barrier_node_t;
+
+static LIST_HEAD(barrier_list);
+static DECLARE_MUTEX(search_lock);
+static atomic_t next_id = ATOMIC_INIT(0);
+
+/**
+ * Function declarations
+ */
+int _get_next_id(void);
+void _leave_barrier(barrier_node_t *o, unsigned long f);
+int destroyall(void);
+void display(void);
+barrier_node_t* _get_barrier_node(int barrierID);
+
+
+/**
+ * Create a barrier
+ * @param num Size of the barrier
+ * @return barrier ID
+ */
+asmlinkage int sys_barriercreate(int num)
+{
+	printk(KERN_INFO "entering sys_barriercreate\n");
+	// check input
+	if(num < 1) {return -EINVAL;}
+	printk(KERN_INFO "creating barrier of size %d\n", num);
+	// create barrier node, allocate memory
+	barrier_node_t *bnPtr = (barrier_node_t *)kmalloc(sizeof(barrier_node_t), GFP_KERNEL);
+	if (NULL == bnPtr) {return -ENOMEM;}
+	
+	// create barrier, allocate memory
+	barrier_t *b = (barrier_t *)kmalloc(sizeof(barrier_t), GFP_KERNEL);
+	if (NULL == b) {
+		kfree(bnPtr);
+		return -ENOMEM;
+	}
+	
+	// set barrier struct fields
+	printk(KERN_INFO "memory allocated\n");
+	b->initial_count = num;
+	atomic_set( &b->refcount , 0); // shouldn't this be zero?
+	b->waiting_count = 0;
+	b->destroyed = 0;
+	b->barrier_iteration = 0;
+	
+	// init barrier spin_lock
+	spin_lock_init( &b->spin_lock );
+	
+	// init wait queue head
+	init_waitqueue_head( &b->queue );
+
+	// set id
+	b->bID = _get_next_id();
+	bnPtr->barrier = b;
+	
+	// add barrier node to the barrier list
+	INIT_LIST_HEAD( &bnPtr->list );
+	list_add( &bnPtr->list , &barrier_list);
+	printk(KERN_INFO "initialization complete: id is %d\n", b->bID);
+
+	// debug, print list of barriers
+	display();
+	
+	// return barrier ID
+	return b->bID;
+}
+
+
+/**
+ * Function to destroy a barrier given its ID
+ * @param ID of the barrier to destroy, or -1 to destroy all
+ * @return number of awoken process, or -1 if barrier not found or already destroyed
+ */
+asmlinkage int sys_barrierdestroy(int barrierID)
+{
+	// speial case barrierID = -1
+	// destroy everything
+	if (barrierID == -1) {return destroyall();}
+	
+  	// check ID validity
+	if (barrierID < 0) {return -EINVAL;}
+	
+	int return_value = 0;
+	barrier_node_t *objPtr = _get_barrier_node(barrierID);
+	unsigned long flags;
+	
+	// barrier doesn't exist (or wrong ID?) return error
+	if ( NULL == objPtr ) {
+		printk(KERN_INFO "attempting to delete nonexistent barrier %d\n",
+			barrierID);
+		return -EINVAL;
+	 
+	} else { // barrier found
+		printk(KERN_INFO "in destroy routine for barrier %d\n", barrierID);
+		printk(KERN_INFO "deleting from list\n");
+		// lock barrier list, delete, release lock (barrier can't be found now)
+		down(&search_lock);
+		list_del(&objPtr->list);
+		up(&search_lock);
+		// lock barrier
+		spin_lock_irqsave( &objPtr->barrier->spin_lock, flags );
+		
+		// set destroyed mode
+		objPtr->barrier->destroyed = 1;
+		
+		// if people in queue, wake them up, and count
+		int wc = objPtr->barrier->waiting_count;
+
+		printk(KERN_INFO "Found %d waiters\n", wc);
+		if (wc != 0)
+		{
+			// wake up everyone
+			wake_up_all( &objPtr->barrier->queue );
+			// remember - number of awoken processes
+			return_value = wc;
+		}
+		// leave barrier properly (destroy memory if last one to leave)
+		_leave_barrier(objPtr, flags);
+		printk(KERN_INFO "trying to read current barrier list\n");
+		display();
+	}
+	printk(KERN_INFO "Exiting destruct routine\n");
+	return return_value;
+}
+
+
+/**
+ * Helper function, not required in the HW, destroy every barrier
+ * @return number of awoken processes accross all barriers
+ */
+int destroyall(void) {
+	
+	int destroyall_return = 0;
+	
+	list_head_t *iter;
+	barrier_node_t *objPtr;
+	
+	// iterate over the list, destroy the first elem until list empty
+	redo:
+	__list_for_each(iter, &barrier_list) {
+		objPtr = list_entry(iter, barrier_node_t, list);
+		
+		destroyall_return += sys_barrierdestroy( objPtr->barrier->bID );
+		goto redo;
+	}
+	// count the number of awoken processes (not bulletproof, barrierdestroy returns -1)
+	return destroyall_return;
+}
+
+/**
+ * The current process waits at the barrier, unless is the Nth one and wakes everybody up
+ * @param barrierID ID of the barrier to 'grab and wait'
+ * @return 0 if everything went OK, negative number otherwise
+ */
+asmlinkage int sys_barrierwait(int barrierID)
+{
+	int return_value = 0;
+	int pid = current->tgid;
+	
+	// check ID validity
+	if (barrierID < 0) {return -EINVAL;}
+	
+	// get barrier, update refcount
+	barrier_node_t *objPtr = _get_barrier_node(barrierID);
+	
+	// if not found, barrier ID must be wrong
+	if (NULL == objPtr) {
+		return -EINVAL;
+	} else { // barrier found
+		int my_iteration;
+		unsigned long flags; // overwritten by macro
+		
+		// lock barrier
+		barrier_t *b = objPtr->barrier;
+		spin_lock_irqsave( &b->spin_lock , flags);
+		// if it was destroyed, leave and return error
+		if (b->destroyed) {
+			_leave_barrier(objPtr, flags);
+			return -EINVAL;
+		}
+		my_iteration = b->barrier_iteration;
+		// update the counter of people waiting
+		if (++b->waiting_count == b->initial_count ) // barrier full
+		//if (atomic_dec_and_test( &objPtr->barrier->waiting_count )) // all processes are here (waiting_count=0)
+		{
+			// wake up everyone
+			b->barrier_iteration++;
+			b->waiting_count = 0;
+			wake_up_all( &objPtr->barrier->queue);
+
+			// decrement refcount and release lock
+			_leave_barrier(objPtr, flags);
+			// go
+			printk(KERN_INFO "Process %d woke everybody up\n", pid);
+			return 0;
+		}
+		else // get in queue and wait
+		{
+			//get in queue
+			// release lock (do this before prepare_to_wait?)
+			spin_unlock_irqrestore( &b->spin_lock , flags);
+
+			printk(KERN_INFO "Process %d getting in queue\n", pid);
+
+			// get on the waitqueue
+			DEFINE_WAIT(wait);
+			printk(KERN_INFO "Process %d Prepare_to_wait\n", pid);
+			prepare_to_wait( &b->queue , &wait, TASK_INTERRUPTIBLE );
+
+			
+			// go to sleep
+			while (b->barrier_iteration == my_iteration && 0 == b->destroyed) {
+				// still the barrier we were waiting for
+				printk(KERN_INFO "Process %d yielding to the scheduler\n", pid);
+				schedule();
+				printk(KERN_INFO "Process %d just woke up\n", pid);
+			}
+
+
+			// get out of the list
+			finish_wait( &objPtr->barrier->queue , &wait);
+
+			//lock barrier
+			spin_lock_irqsave( &b->spin_lock , flags);
+			//if barrier is marked destroyed, set return to -1
+			if (b->barrier_iteration == my_iteration) {
+				return_value = -ECANCELED;
+			}
+			// leave barrier properly
+			_leave_barrier(objPtr, flags);
+		}
+	}
+	// return the return value
+	return return_value;
+
+}
+
+/**
+ * helper/debug function, prints barrier list to KERN_INFO
+ */
+void display(void)
+{
+	list_head_t *iter;
+	barrier_node_t *objPtr;
+	down(&search_lock);
+
+	printk(KERN_INFO "Current barrier list:\n");
+	__list_for_each(iter, &barrier_list) {
+		printk(KERN_DEBUG "Current list pointer: %p\n", iter);
+		objPtr = list_entry(iter, barrier_node_t, list);
+		printk(KERN_DEBUG "Current item pointer: %p\n", objPtr);
+		printk(KERN_DEBUG "id:%d|cap:%d\n"
+			, objPtr->barrier->bID
+			, objPtr->barrier->initial_count);
+	}
+	up(&search_lock);
+	printk(KERN_INFO "End of list\n");
+}
+
+/**
+ * Get a barrier node:
+ *  - lock barrier list
+ *  - barrier found, update refcount
+ *  - release barrier list
+ *  We need to lock the whole list and update the ref count to make sure no
+ *  one has deleted the barrier by the time we reach it.
+ * @param ID of the desired barrier
+ * @return barrier_node or NULL if it was not found
+ */
+barrier_node_t* _get_barrier_node(int barrierID)
+{
+	list_head_t *iter;
+	barrier_node_t *objPtr = NULL;
+	down(&search_lock);
+	
+	__list_for_each(iter, &barrier_list) {
+		objPtr = list_entry(iter, barrier_node_t, list);
+		if(objPtr->barrier->bID == barrierID) {
+			break;
+		}
+	}
+	if (NULL != objPtr) {
+		atomic_inc(&objPtr->barrier->refcount);
+	} else {
+		printk(KERN_INFO "Barrier %d not found!\n", barrierID);
+	}
+	up(&search_lock);
+
+	return objPtr; // Not found
+}
+
+/**
+ * Get the next ID by incrementing next_id (using an atomic function)
+ */
+int _get_next_id()
+{
+  return atomic_inc_return( &next_id );
+}
+
+/*
+ * Leaves a barrier properly, decrement refcount, destroy if the barrier is in
+ * destroy mode and we're the last one 
+ *	1. assume that we have the spin-lock
+ *	2. decrement refcount
+ *	3. if 0
+ *		a. test for destroyed flag
+ *		b. free memory if need be
+ *	4. release spinlock
+ *	
+*/
+void _leave_barrier(barrier_node_t *objPtr, unsigned long flags) {
+	int pid = current->tgid;
+	printk(KERN_INFO "process %d is leaving barrier %d\n",
+		pid, objPtr->barrier->bID
+	);
+	// sanity checks
+	if (NULL == objPtr) {
+		printk(KERN_ERR "NULL list-node passed to _leave_barrier!\n");
+		return;
+	} else if ( NULL == objPtr->barrier ) {
+		printk(KERN_ERR "NULL barrier passed to _leave_barrier!\n");
+		return;
+	}
+	barrier_t *b = objPtr->barrier;
+
+	// are we the last one?
+	if ( atomic_dec_and_test( &b->refcount ) ) {
+		printk(KERN_INFO "Process %d is last to leave barrier %d\n",
+		pid, b->bID); // XXX undeclared
+		// should it be destroyed?
+		if (b->destroyed == 1)
+		{
+			spin_unlock_irqrestore( &b->spin_lock , flags);
+			printk(KERN_INFO "Barrier %d in destroyed mode\n", b->bID);
+			printk(KERN_INFO "freeing barrier\n");
+			kfree(b);
+			printk(KERN_INFO "freeing barrier list entry\n");
+			kfree(objPtr);
+			return;
+		}
+	} 	
+	//unlock barrier
+	spin_unlock_irqrestore( &b->spin_lock , flags);
+}
+
diff -Naur linux-2.6.11.12-reference/arch/i386/kernel/entry.S linux-2.6.11.12-hwk3/arch/i386/kernel/entry.S
--- linux-2.6.11.12-reference/arch/i386/kernel/entry.S	2009-03-05 12:24:40.000000000 -0500
+++ linux-2.6.11.12-hwk3/arch/i386/kernel/entry.S	2009-03-02 19:01:30.000000000 -0500
@@ -890,5 +890,8 @@
 	.long sys_add_key
 	.long sys_request_key
 	.long sys_keyctl
+	.long sys_barriercreate
+	.long sys_barrierdestroy	/* 290 */
+	.long sys_barrierwait
 
 syscall_table_size=(.-sys_call_table)
diff -Naur linux-2.6.11.12-reference/arch/i386/kernel/Makefile linux-2.6.11.12-hwk3/arch/i386/kernel/Makefile
--- linux-2.6.11.12-reference/arch/i386/kernel/Makefile	2005-06-11 22:45:37.000000000 -0400
+++ linux-2.6.11.12-hwk3/arch/i386/kernel/Makefile	2009-03-02 19:01:30.000000000 -0500
@@ -9,6 +9,10 @@
 		pci-dma.o i386_ksyms.o i387.o dmi_scan.o bootflag.o \
 		doublefault.o quirks.o
 
+# added by students
+obj-y += barrier.o
+# *****************
+
 obj-y				+= cpu/
 obj-y				+= timers/
 obj-$(CONFIG_ACPI_BOOT)		+= acpi/
diff -Naur linux-2.6.11.12-reference/include/asm-i386/unistd.h linux-2.6.11.12-hwk3/include/asm-i386/unistd.h
--- linux-2.6.11.12-reference/include/asm-i386/unistd.h	2005-06-11 22:45:37.000000000 -0400
+++ linux-2.6.11.12-hwk3/include/asm-i386/unistd.h	2009-03-02 19:01:30.000000000 -0500
@@ -294,8 +294,11 @@
 #define __NR_add_key		286
 #define __NR_request_key	287
 #define __NR_keyctl		288
+#define __NR_barriercreate	289
+#define __NR_barrierdestroy	290
+#define __NR_barrierwait	291
 
-#define NR_syscalls 289
+#define NR_syscalls 292
 
 /*
  * user-visible error numbers are in the range -1 - -128: see
diff -Naur linux-2.6.11.12-reference/include/linux/syscalls.h linux-2.6.11.12-hwk3/include/linux/syscalls.h
--- linux-2.6.11.12-reference/include/linux/syscalls.h	2005-06-11 22:45:37.000000000 -0400
+++ linux-2.6.11.12-hwk3/include/linux/syscalls.h	2009-03-02 19:01:30.000000000 -0500
@@ -505,5 +505,8 @@
 
 asmlinkage long sys_keyctl(int cmd, unsigned long arg2, unsigned long arg3,
 			   unsigned long arg4, unsigned long arg5);
+asmlinkage long sys_barriercreate(int num);
+asmlinkage long sys_barrierdestroy(int id);
+asmlinkage long sys_barrierwait(int id);
 
 #endif
